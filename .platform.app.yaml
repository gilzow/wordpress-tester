# This file describes an application. You can have multiple applications
# in the same project.

# The name of this app. Must be unique within a project.
name: app

# The runtime the application uses.
type: "php:7.4"

# Configuration of the build of the application.
build:
    flavor: composer

dependencies:
    php:
        composer/composer: '^2'
        wp-cli/wp-cli-bundle: "^2.4.0"

hooks:
    build: |
        set -e
        # Copy manually-provided plugins into the plugins directory.
        # This allows manually-provided and composer-provided plugins to coexist.
        rsync -a plugins/* wordpress/wp-content/plugins/
      # install our wp-cli package for generating graphql tokens
      wp package install https://github.com/gilzow/wp-graphql-jwt-authentication-wp-cli.git

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: "db:mysql"

# The configuration of app when it is exposed to the web.
web:
    locations:
        "/":
            # The public directory of the app, relative to its root.
            root: "wordpress"
            # The front-controller script to send non-static requests to.
            passthru: "/index.php"
            # Wordpress has multiple roots (wp-admin) so the following is required
            index:
                - "index.php"
            # The number of seconds whitelisted (static) content should be cached.
            expires: 600
            scripts: true
            allow: true
            rules:
                ^/composer\.json:
                    allow: false
                ^/license\.txt$:
                    allow: false
                ^/readme\.html$:
                    allow: false
        "/wp-content/cache":
            root: "wordpress/wp-content/cache"
            scripts: false
            allow: false
        "/wp-content/uploads":
            root: "wordpress/wp-content/uploads"
            scripts: false
            allow: true

# The size of the persistent disk of the application (in MB).
disk: 2048

# The mounts that will be performed when the package is deployed.
mounts:
    "wordpress/wp-content/cache":
        source: local
        source_path: "cache"
    "wordpress/wp-content/uploads":
        source: local
        source_path: "uploads"
    deploy:
      source: service
      service: files
      source_path: deploy

source:
  operations:
    auto-update:
      command: |
        #!/usr/bin/env bash
        set -e
        updateBranch="auto-updates"
        #get the name of our remote. we may have more than one so grab the first
        remote=$(git remote | head -n 1)
        #make sure we're up-to-date
        git fetch --all

        #do we have the branch remotely?
        branchExistsRemote=$(git ls-remote --exit-code "${remote}" "${updateBranch}")

        # does our branch exist locally?
        branchExistsLocally=$(git show-ref --quiet refs/heads/auto-updates)

        #if it doesn't exist locally, then we know we'll need a new local branch
        if (( 1 == branchExistsLocally )); then
          doBranch='yes'
        fi

        if (( 0 != branchExistsRemote )); then
          getBranchFromRemote='yes'
        fi

        git checkout "${doBranch:+ -b }${updateBranch}${getBranchFromRemote:+ ${remote}/${updateBranch}}"

        #now that we're on the branch, if we already had it locally AND we have it remotely, let's make sure it is up-to-date
        if (( 0 == branchExistsLocally  && 0 == branchExistsRemote )); then
          git pull --no-rebase
        fi

        #let's get our updates
        composer update
        updates=$(git status --porcelain=1)

        # If we had updates, add the updated composer.lock and commit it
        if [[ -n "${updates}" ]]; then
          git add composer.lock
          git commit -m "Auto updates"

          git push "${remote}" "${updateBranch}"
        fi
